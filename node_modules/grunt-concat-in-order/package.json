{
  "name": "grunt-concat-in-order",
  "description": "Concatenates files respecting declared, required dependencies order.",
  "version": "0.1.6",
  "homepage": "https://github.com/miensol/grunt-concat-in-order",
  "author": {
    "name": "Piotr Mionskowski",
    "email": "piotr.mionskowski@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/miensol/grunt-concat-in-order.git"
  },
  "bugs": {
    "url": "https://github.com/miensol/grunt-concat-in-order/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/miensol/grunt-concat-in-order/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "concat",
    "concat-in-order",
    "topological sort",
    "dependency tree",
    "concat in order",
    "resolve file order",
    "sort dependencies",
    "dependency"
  ],
  "readme": "# grunt-concat-in-order\r\n\r\n> Concatenates files respecting dependencies.\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-concat-in-order --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-concat-in-order');\r\n```\r\n\r\n## The \"concat_in_order\" task\r\n\r\n### Overview\r\n\r\nThe `concat_in_order` task extracts declared required dependencies as well as provided modules/classes from your javascript (or any other text) files. Having this [dependency graph](http://en.wikipedia.org/wiki/Dependency_graph) the task will perform [topological sort](http://en.wikipedia.org/wiki/Topological_sorting) and concatenate file so that all modules will be put after their required dependencies.\r\n\r\nIn your project's Gruntfile, add a section named `concat_in_order` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  concat_in_order: {\r\n    your_target: {\r\n      options: {\r\n          /*\r\n          this is a default function that extracts required dependencies/module names from file content\r\n          (getMatches - function that pick groups from given regexp)\r\n          extractRequired: function (filepath, filecontent) {\r\n            return this.getMatches(/require\\(['\"]([^'\"]+)['\"]/g, filecontent);\r\n          },\r\n          this is a default function that extracts declared modules names from file content\r\n          extractDeclared: function (filepath, filecontent) {\r\n            return this.getMatches(/declare\\(['\"]([^'\"]+)['\"]/g, filecontent);\r\n          }\r\n          */\r\n      },\r\n      files: {\r\n        'build/concatenated.js': ['lib/**/*.js']\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n### Sample\r\nLet's say you have 4 files in a `lib` directory\r\n\r\n- AUsingBaseBAndBaseA.js\r\n\r\n```js\r\n/*start AUsingBaseBAndBaseA*/\r\nframwork.require('module.BaseB');\r\nframwork.require('module.BaseA');\r\nframework.declare('module.UsingBaseBAndBaseA');\r\nvar forth = function fourthFunction(){};\r\n/*end AUsingBaseBAnddBaseA*/\r\n```\r\n\r\n- AUsingBaseA.js\r\n\r\n```js\r\n/*start AUsingBaseA*/\r\nframwork.require('module.BaseA');\r\nvar second = function secondFunction(){};\r\n/*end AUsingBaseA*/\r\n```\r\n\r\n\r\n- BaseA.js\r\n\r\n```js\r\n/*start BaseA*/\r\nframework.declare('module.BaseA');\r\nvar first = function firstFunction(){};\r\n/*end BaseA*/\r\n```\r\n\r\n- BaseBUsingBaseA.js\r\n\r\n```js\r\n/*start BaseBUsingBaseA*/\r\nframwork.require('module.BaseA');\r\nframework.declare('module.BaseBUsingBaseA');\r\nframework.declare('module.BaseB');\r\nvar third = function thirdFunction(){};\r\n/*end  BaseBUsingBaseA*/\r\n```\r\nGiven the above configuration the task will produce `build/concatenated.js` file with following content:\r\n\r\n```js\r\n/*start BaseA*/\r\nframework.declare('module.BaseA');\r\nvar first = function firstFunction(){};\r\n/*end BaseA*/\r\n/*start BaseBUsingBaseA*/\r\nframwork.require('module.BaseA');\r\nframework.declare('module.BaseBUsingBaseA');\r\nframework.declare('module.BaseB');\r\nvar third = function thirdFunction(){};\r\n/*end  BaseBUsingBaseA*/\r\n/*start AUsingBaseA*/\r\nframwork.require('module.BaseA');\r\nvar second = function secondFunction(){};\r\n/*end AUsingBaseA*/\r\n/*start AUsingBaseBAndBaseA*/\r\nframwork.require('module.BaseB');\r\nframwork.require('module.BaseA');\r\nframework.declare('module.UsingBaseBAndBaseA');\r\nvar forth = function fourthFunction(){};\r\n/*end AUsingBaseBAnddBaseA*/\r\n```\r\n\r\n### File based\r\nYou can enable automatic addition of files with the following example. (notice the onlyConcatRequiredFiles : true) This is the same way of declaring dependencies used by [juicer](https://github.com/cjohansen/juicer)\r\n\r\n    files: {\r\n        'dist/mybuild.js': ['js/src/main.js']\r\n    },\r\n    options: {\r\n        extractRequired: function(filepath, filecontent) {\r\n            var workingdir = path.normalize(filepath).split(path.sep);\r\n            workingdir.pop();\r\n\r\n            var deps = this.getMatches(/\\*\\s*@depend\\s(.*\\.js)/g, filecontent);\r\n            deps.forEach(function(dep, i) {\r\n                var dependency = workingdir.concat([dep]);\r\n                deps[i] = path.join.apply(null, dependency);\r\n            });\r\n            return deps;\r\n        },\r\n        extractDeclared: function(filepath) {\r\n            return [filepath];\r\n        },\r\n        onlyConcatRequiredFiles: true\r\n    }\r\n\r\nThis will declare all files as modules using their filenames. In main.js you will typically have these depend statements:\r\n\r\n    /**\r\n     * @depend ../lib/jquery.js\r\n     * @depend otherfile.js\r\n     * @depend calculator/add.js\r\n     */\r\n\r\nYou only need to specify the main.js and the other dependencies will be added automatically. As well as their dependencies etc.\r\n\r\nIf you want to add a file that isn't referenced anywhere you need to add it manually.\r\n\r\n    files: {\r\n        'dist/mybuild.js': ['js/src/main.js', 'js/src/unReferencedButWanted.js']\r\n    },\r\n\r\nThe option onlyConcatRequiredFiles will only work if modules are declared and required with their actual filenames.\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n\r\n- 0.1.6 - @mokkabonna updated documenation and fixed path splitting in sample\r\n- 0.1.4 - @mokkabonna added ability to concat only files that are required by some module\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-concat-in-order@0.1.6",
  "_from": "grunt-concat-in-order@*"
}
