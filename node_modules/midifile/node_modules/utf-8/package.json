{
  "name": "utf-8",
  "description": "Encode/decode UTF8.",
  "version": "0.1.1",
  "author": {
    "name": "Nicolas Froidure"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/nfroidure/UTF8.js.git"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.18.2",
    "mocha-lcov-reporter": "0.0.1",
    "coveralls": "~2.10.0",
    "istanbul": "~0.2.8",
    "karma": "~0.12.15",
    "karma-mocha": "~0.1.3",
    "karma-firefox-launcher": "~0.1.3",
    "karma-slimerjs-launcher": "~0.1.2",
    "requirejs": "~2.1.11",
    "karma-script-launcher": "~0.1.0",
    "karma-chrome-launcher": "~0.1.3",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-jasmine": "~0.1.5",
    "karma-coffee-preprocessor": "~0.2.1",
    "karma-phantomjs-launcher": "~0.1.4"
  },
  "scripts": {
    "test": "node_modules/mocha/bin/mocha tests/*.mocha.js",
    "coveralls": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha --report lcovonly -- tests/*.mocha.js -R spec -t 5000 && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "cover": "./node_modules/istanbul/lib/cli.js cover --report html ./node_modules/mocha/bin/_mocha -- tests/*.mocha.js -R spec -t 5000"
  },
  "keywords": [
    "command",
    "events"
  ],
  "main": "./src/UTF8.js",
  "preferGlobal": "false",
  "readme": "# UTF8.js\n> A simple JavaScript library to encode/decode UTF8 strings.\n\n[![Build Status](https://travis-ci.org/nfroidure/UTF8.js.png?branch=master)](https://travis-ci.org/nfroidure/UTF8.js) [![Build status](https://secure.travis-ci.org/nfroidure/UTF8.js.png)](https://travis-ci.org/nfroidure/UTF8.js) [![Dependency Status](https://david-dm.org/nfroidure/UTF8.js.png)](https://david-dm.org/nfroidure/UTF8.js) [![devDependency Status](https://david-dm.org/nfroidure/UTF8.js/dev-status.png)](https://david-dm.org/nfroidure/UTF8.js#info=devDependencies) [![Coverage Status](https://coveralls.io/repos/nfroidure/UTF8.js/badge.png?branch=master)](https://coveralls.io/r/nfroidure/UTF8.js?branch=master)\n\n## Encoding\n\nA char:\n```js\nUTF8.setBytesFromCharCode('é'.charCodeAt(0));\n// [0xC3, 0xA9]\n```\n\nA string:\n```js\nUTF8.setBytesFromString('1.3$ ~= 1€');\n// [49, 46, 51, 36, 32, 126, 61, 32, 49, 226, 130, 172]\n```\n\n## Decoding\n\nA char:\n```js\nString.fromCharCode(UTF8.getCharCode([0xC3, 0xA9]);\n// 'é'\n```\n\nA string:\n```js\nUTF8.getStringFromBytes([49, 46, 51, 36, 32, 126, 61, 32, 49, 226, 130, 172]);\n// '1.3$ ~= 1€'\n```\n\n## TypedArrays are welcome\n\nAs inputs :\n```js\nvar bytes=new Uint8Array([0xC3, 0xA9, 49, 46, 51, 36, 32, 126, 61, 32, 49, 226, 130, 172]);\n\n// The first char\nString.fromCharCode(UTF8.getCharCode(bytes));\n// é\n\n// The following string at the offset 2\nUTF8.getStringFromBytes(bytes,2);\n// '1.3$ ~= 1€'\n```\nAs well as outputs :\n```js\nvar bytes=new Uint8Array(14);\n\n// First encoding a char\nUTF8.setBytesFromCharCode('é'.charCodeAt(0));\n\n// Then encoding a string\nUTF8.setBytesFromString('1.3$ ~= 1€', 2);\n```\n\n## UTF8 encoding detection\n```js\nUTF8.isNotUTF8(bytes);\n// true | false\n```\nThis function can prove the text contained by the given bytes is not UTF-8\n (or badly encoded UTF-8 string). It's not reciprocally true, especially for\n short strings with wich false positives are frequent.\n\n## Strict mode\nIf you try to encode an UTF8 string in an ArrayBuffer too short to contain the\n complete string, it will silently fail. To avoid this behavior, use the strict\n mode :\n\n```js\nUTF8.setBytesFromString('1.3$ ~= 1€', 2, null, true);\n```\n\n## NodeJS\n\nAlso available on NPM :\n```sh\nnpm install utf-8\n```\n\n# Thanks\n- The Debian project for it's free (as freedom) russian/japanese man pages\n used for real world files tests !\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nfroidure/UTF8.js/issues"
  },
  "homepage": "https://github.com/nfroidure/UTF8.js",
  "_id": "utf-8@0.1.1",
  "_from": "utf-8@~0.1.0"
}
